(defun test_file(test_string)
  (setq start_state 0)
  (setq final_states '(1 3))
  (setq matrix '('(x y nil nil nil) '(nil nil x nil nil) '(nil nil x y nil)
    '(nil nil nil x z) '(nil a nil nil x)))
  (setq current_state start_state)

  (dotimes (i (length matrix))
    (setq ch (subseq test_string i (+ i 1)))
    (setq current_list (nth current_state matrix))
    (dotimes (j (length current_list))
      (setq current_list (nth current_state matrix))
      (if (eq (nth j current_list) (intern ch))
        (setq current_state j)
        (if (= j (- (length current_list) 1)) nil)
      )
    )
  )

  (dotimes (k (length final_states))
    (if (= current_state (nth k final_states))
      t
      (if (= k (- (length final_states) 1)) nil)
    )
  )
)

(defun read_file(file_name)
  (setq fp (open file_name :direction :input))
  (string(read fp "done"))
)

(defun demo()
  (run "theString.txt")
)

(defun run(file_name)
  (if (test_file (read_file file_name))
    (print "String valid.")
    (print "string invalid.")
  )
)
